#=================================================================================================
#	Scale based round shadows by Inktrebuchet
#=================================================================================================
[function shadow()f]
let f = 0;
if anim != -2 && !isasserted(invisible) && !isasserted(noshadow) && !isasserted(nobg) && !isasserted(nofg) && animframe(group) != -1 && animframe(image) != -1 {let f = 1;}

[function sprite()s]
let s = 0;
if movetype = H && statetype = L {let s = 0.60;}
else if movetype = H && statetype = A {let s = 0.30;}

[Statedef +1]

	# vertical position, adjusted by localcoord
let py = abs(pos y)/const240p(1);
	# maximum height at which shadows won't grow any thinner or less solid
let ht = 96;
	# rough measure of the characters horizontal size, adjusted by localcoord
let si = const240p(100.0)/(const(size.ground.back) + const(size.ground.front))*(const(size.xscale));
	# character specific scaling factor, if defined
let sc = cond(map(shadow_scale), map(shadow_scale), 1);
	# checks if the shadow should be stretched to account for gethits
let spr = call sprite();
	# default scale for helper shadows
let d = 0.6;

let za = camerazoom;

	# this controls the opacity of shadows
let al = 80; # minimum alpha source
let ba = 192; # base shadow value at floor level
	# scales shadow opacity based on height
if $ba*(($ht-$py)/$ht) >= $al {let al = $ba*(($ht-$py)/$ht);}
	# scales shadow opacity if the character's own transparency is higher
if animframe(alphasource) < $al {let al = animframe(alphasource);}
if animframe(alphadest) > (256-$al) {let al = 256-animframe(alphadest);}
if alpha source < $al {let al = alpha source;}
if alpha dest > (256-$al) {let al = 256-alpha dest;}

let f = call shadow();

	# shadow explod
if teamside && $f && (ishelper || !numexplod(33333399)) {
	explod{
	id:33333399;
	anim:ZH 8530; 
	postype:left; 
	ownpal:1;
	removetime:cond(ishelper, 1, -1);
	supermovetime:100000;
	pausemovetime:100000;
	sprpriority:-6001;
	ignorehitpause:1;
		}
	}
	
	# removes the shadow explod, if necessary
if $f = 0 {removeexplod{id:33333399}}
if ishelper && (isasserted(nofg) || isasserted(nobg)) {removeexplod{id:33333399; redirectid:root,id;}}

	# temporary workaround for localcoord discrepancies
if incustomstate {removeexplod{id:33333399}}

if numexplod(33333399) {
	
	if ishelper && !map(shadow_scale) {map(shadow_scale) := $d;}
	# changes the size and transparency of shadows
	modifyexplod{
		id:33333399; 
		postype:left;
		scale:((.47 - (((.47/($ht/cond($py+.0001 < $ht, $py+.00001, $ht)))))) + .6)/$si * 2 * $sc * $za * (1+$spr), ((.3 - (((.3/($ht/cond($py+.0001 < $ht, $py+.00001, $ht)))))) + .8)/$si * 2 * $sc * $za;
		pos:ceil((screenpos x)*$za), ceil((screenpos y - pos y)*$za);
		trans:addalpha;
		alpha:$al,256-$al;
		}
	}

ignorehitpause {assertspecial{flag:noshadow;}}