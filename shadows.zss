#=================================================================================================
#	Scale based round shadows by Inktrebuchet
#=================================================================================================
[function shadow()f]
let f = 0;
if anim != -2 && !isasserted(invisible) && !isasserted(noshadow) && !isasserted(nobg) && !isasserted(nofg) && animframe(group) != -1 && animframe(image) != -1 {let f = 1;}

[function sprite()s]
let s = 0;
if (movetype = H && statetype = L) || (animframe(group) = [5030,5032] && animframe(image) = [20,40]) || (animframe(group) = [5040,5042] && animframe(image) = [0,20]) || (animframe(group) = [5070,5072] && animframe(image) = [10,20]) {let s = 0.60;}
else if (movetype = H && statetype = A) || (animframe(group) = [5030,5032] && animframe(image) = [0,10]) || (animframe(group) = [5030,5032] && animframe(image) = 50) || (animframe(group) = [5070,5072] && animframe(image) = [0,10]) {let s = 0.30;}

[Statedef +1]

	# stages can turn off all of this code at once
if !stagevar(reflection.intensity) && !stageconst(NoShadows) {

let f = call shadow();

switch map(shadow_quality) {
	case 1: let qu = 1;
	case 3: let qu = 4;
	case 4: let qu = stagevar(stageinfo.localcoord.x)/320;
	default: let qu = 2;
	}
	# shadow explod

if teamside && $f && (ishelper || !numexplod(33333399)) {
	
	let red = stagevar(shadow.color.r);
	let grn = stagevar(shadow.color.g);
	let blu = stagevar(shadow.color.b);
	
	explod{
	id:33333399;
	anim:ZH 8530+$qu; 
	postype:left; 
	space:stage;
	ownpal:1;
	removetime:cond(ishelper, 1, -1);
	supermovetime:100000;
	pausemovetime:100000;
	sprpriority:-6001;
	ignorehitpause:1;
	palfx.time:-1;
	palfx.add:($grn+$blu),($red+$blu),($red+$grn);
	palfx.mul:256,256,256
		}
}
	# removes the shadow explod, if necessary
if !$f {removeexplod{id:33333399}}
if ishelper && (isasserted(nofg) || isasserted(nobg) || isasserted(globalnoshadow)) {removeexplod{id:33333399; redirectid:root,id;}}

	# vertical position, adjusted by localcoord
let py = abs(pos y)/const240p(1);
	# maximum height at which shadows won't grow any thinner or less solid
let ht = 96;
	# final height comparison
let fh = $ht/cond($py+.0001 < $ht, $py+.00001, $ht);
	# rough measure of the characters horizontal size, adjusted by localcoord
let si = const240p(100.0)/(const(size.ground.back) + const(size.ground.front))/const(size.xscale);
	# character specific scaling factor, if defined
let sc = cond(map(shadow_scale), map(shadow_scale), 1);
	# checks if the shadow should be stretched to account for gethits
let gh = call sprite();
	# default scale for helper shadows
let d = 0.6;
if ishelper && !map(shadow_scale) {map(shadow_scale) := $d;}
	# accounts for localcoord discrepancies during custom states
let loc = 1;
if incustomstate {let loc = localcoord x/stateowner,localcoord x;}

	# this controls the opacity of shadows
let al = cond(!ishelper, map(shadow_min), root,map(shadow_min)); # minimum alpha source
let ba = cond(!ishelper, map(shadow_max), root,map(shadow_max)); # base shadow value at floor level
	# scales shadow opacity based on height
if $ba*(($ht-$py)/$ht) >= $al {let al = $ba*(($ht-$py)/$ht);}
	# scales shadow opacity if the character's own transparency is higher
if animframe(alphasource) < $al {let al = animframe(alphasource);}
if animframe(alphadest) > (256-$al) {let al = 256-animframe(alphadest);}
if alpha source < $al {let al = alpha source;}
if alpha dest > (256-$al) {let al = 256-alpha dest;}

	# changes the size and transparency of shadows	
if numexplod(33333399) {
	modifyexplod{
		id:33333399; 
		space:stage;
		postype:left;
		scale:(2.6-1.5/$fh)/$si*$sc*(1.0/$qu)*(1+$gh), (2-0.7/$fh)/$si*$sc*(1.0/$qu);
		pos:ceil(screenpos x*camerazoom*$loc), 0;
		trans:addalpha;
		alpha:$al,256-$al;
		}
	}

#ignorehitpause if fighttime > 0 {modifystagevar{shadow.intensity:0; shadow.color:0,0,0;}}
ignorehitpause {assertspecial{flag:noshadow;}}
}